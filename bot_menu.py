# tg_bot_runner.py
import os
import threading
import time
import telebot
from telebot import types

BOT_TOKEN  = os.getenv("TG_BOT_TOKEN", "8134690532:AAETe0Hgj8rjrKBU4fpVhFcfgqqOjMMryhI")
BOT_USER   = os.getenv("TG_BOT_USERNAME", "flirtmod_bot")  # –±–µ–∑ @, –Ω–∞–ø—Ä. flirtmod_bot
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://95.164.23.186.sslip.io/accounts/tg/start")

_bot = None
_thread = None
_started = False

def _build_bot():
    if not BOT_TOKEN:
        raise RuntimeError("TG_BOT_TOKEN is empty. Set it in env.")
    bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")
    return bot

def _build_menu_button() -> types.MenuButtonWebApp | None:
    """
    –°–æ–≤–º–µ—Å—Ç–∏–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ MenuButtonWebApp –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π pyTelegramBotAPI.
    """
    wai = types.WebAppInfo(url=WEBAPP_URL)
    try:
        # –ù–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        return types.MenuButtonWebApp(type="web_app", text="–ò–≥—Ä–∞—Ç—å", web_app=wai)
    except TypeError:
        try:
            # –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ ‚Äî –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            return types.MenuButtonWebApp("web_app", "–ò–≥—Ä–∞—Ç—å", wai)
        except TypeError:
            return None

def _set_menu_button(bot):
    btn = _build_menu_button()
    if btn:
        try:
            bot.set_chat_menu_button(menu_button=btn)
        except TypeError:
            # –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –±–µ–∑ –∏–º–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            bot.set_chat_menu_button(btn)
    else:
        # –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è lib ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        print("[TG BOT] MenuButtonWebApp not supported by your telebot version; skipping set_chat_menu_button")

def _register_handlers(bot):
    @bot.message_handler(commands=["start", "play"])
    def start(m: types.Message):
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(
            text="üéÆ –ò–≥—Ä–∞—Ç—å (–≤ Telegram)",
            web_app=types.WebAppInfo(url=WEBAPP_URL)
        ))
        deep_link = f"https://t.me/{os.getenv('TG_BOT_USERNAME','')}" + "?startapp=play"
        kb.add(types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –≤ Telegram (deep link)", url=deep_link))
        bot.send_message(m.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ñ–º–∏ ¬´–ò–≥—Ä–∞—Ç—å¬ª.", reply_markup=kb)

    @bot.message_handler(commands=["menu"])
    def menu(m: types.Message):
        _set_menu_button(bot)
        bot.reply_to(m, "–ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é ¬´–ò–≥—Ä–∞—Ç—å¬ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

def _polling_loop(bot):
    _set_menu_button(bot)
    while True:
        try:
            bot.infinity_polling(skip_pending=True, timeout=60, long_polling_timeout=50)
        except Exception as e:
            print(f"[TG BOT] polling error: {e}. Restarting in 5s...")
            time.sleep(5)

def start_bot_if_enabled(app=None):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ, –µ—Å–ª–∏ RUN_BOT=1 –∏ –∑–∞–¥–∞–Ω—ã TG_BOT_TOKEN/TG_BOT_USERNAME.
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è Flask dev reloader: —Å—Ç–∞—Ä—Ç—É–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ.
    """
    global _bot, _thread, _started
    if _started:
        return

    run_bot = os.getenv("RUN_BOT", "0") == "1"
    if not run_bot:
        print("[TG BOT] RUN_BOT != 1, –±–æ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.")
        return

    # –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏ Werkzeug reloader
    is_child = (os.getenv("WERKZEUG_RUN_MAIN") == "true") or (not os.getenv("WERKZEUG_RUN_MAIN"))
    if app is not None and app.debug and not is_child:
        print("[TG BOT] debug parent process detected, skip.")
        return

    _bot = _build_bot()
    _register_handlers(_bot)

    _thread = threading.Thread(target=_polling_loop, args=(_bot,), daemon=True)
    _thread.start()
    _started = True
    print("[TG BOT] started in background thread.")
