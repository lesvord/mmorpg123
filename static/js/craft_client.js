// static/js/craft_client.js - –ö–ª–∏–µ–Ω—Ç —Å–∏—Å—Ç–µ–º—ã –∫—Ä–∞—Ñ—Ç–∞
(() => {
  'use strict';

  const $ = (id) => document.getElementById(id);
  const fmtTime = (sec) => {
    const s = Math.ceil(sec);
    return s >= 60 ? `${Math.floor(s/60)}–º ${s%60}—Å` : `${s}—Å`;
  };

  const CRAFT_API = {
    recipes: '/craft/api/recipes',
    recipe: '/craft/api/recipe/',
    start: '/craft/api/start',
    complete: '/craft/api/complete',
    status: '/craft/api/status',
    cancel: '/craft/api/cancel'
  };

  let craftStatus = null;
  let craftTimer = null;

  async function fetchJSON(url, opts = {}) {
    try {
      const r = await fetch(url, opts);
      const j = await r.json();
      return r.ok ? j : null;
    } catch (e) {
      console.error('[craft_client] fetchJSON', e);
      return null;
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤
  async function loadRecipes() {
    const data = await fetchJSON(CRAFT_API.recipes);
    if (!data || !data.ok) {
      console.error('Failed to load recipes');
      return {};
    }
    return data.categories || {};
  }

  // –ù–∞—á–∏–Ω–∞–µ—Ç –∫—Ä–∞—Ñ—Ç
  async function startCraft(recipeKey) {
    const result = await fetchJSON(CRAFT_API.start, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ recipe_key: recipeKey })
    });

    if (!result || !result.ok) {
      const error = result?.error || 'Unknown error';
      (window.pkToast || alert)(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∫—Ä–∞—Ñ—Ç: ${error}`);
      return false;
    }

    (window.pkToast || alert)(result.message || '–ö—Ä–∞—Ñ—Ç –Ω–∞—á–∞—Ç');
    craftStatus = result.craft_status;
    startCraftTimer();
    return true;
  }

  // –ó–∞–≤–µ—Ä—à–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –∫—Ä–∞—Ñ—Ç
  async function completeCraft() {
    const result = await fetchJSON(CRAFT_API.complete, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });

    if (!result || !result.ok) {
      const error = result?.error || 'Unknown error';
      (window.pkToast || alert)(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫—Ä–∞—Ñ—Ç: ${error}`);
      return false;
    }

    const resultItem = result.result;
    (window.pkToast || alert)(`–°–æ–∑–¥–∞–Ω–æ: ${resultItem?.name || '–ü—Ä–µ–¥–º–µ—Ç'}`);
    craftStatus = null;
    stopCraftTimer();
    return true;
  }

  // –û—Ç–º–µ–Ω—è–µ—Ç –∫—Ä–∞—Ñ—Ç
  async function cancelCraft() {
    const result = await fetchJSON(CRAFT_API.cancel, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });

    if (!result || !result.ok) {
      const error = result?.error || 'Unknown error';
      (window.pkToast || alert)(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∫—Ä–∞—Ñ—Ç: ${error}`);
      return false;
    }

    (window.pkToast || alert)(result.message || '–ö—Ä–∞—Ñ—Ç –æ—Ç–º–µ–Ω–µ–Ω');
    craftStatus = null;
    stopCraftTimer();
    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫—Ä–∞—Ñ—Ç–∞
  async function checkCraftStatus() {
    const data = await fetchJSON(CRAFT_API.status);
    if (!data || !data.ok) return null;

    craftStatus = data.craft_status;
    if (craftStatus) {
      if (craftStatus.ready) {
        stopCraftTimer();
        updateCraftUI();
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        (window.pkToast || alert)(`${craftStatus.recipe_name} –≥–æ—Ç–æ–≤!`);
      } else {
        updateCraftUI();
      }
    } else {
      stopCraftTimer();
      updateCraftUI();
    }
    return craftStatus;
  }

  // –û–±–Ω–æ–≤–ª—è–µ—Ç UI —Å—Ç–∞—Ç—É—Å–∞ –∫—Ä–∞—Ñ—Ç–∞
  function updateCraftUI() {
    const statusEl = $('#craftStatus');
    const progressEl = $('#craftProgress');
    const actionEl = $('#craftAction');

    if (!statusEl) return;

    if (craftStatus) {
      const progress = Math.round(craftStatus.progress * 100);
      const remaining = fmtTime(craftStatus.remaining_sec);

      statusEl.innerHTML = `
        <div class="craft-active">
          <div class="craft-name">${craftStatus.recipe_name}</div>
          <div class="craft-time">–û—Å—Ç–∞–ª–æ—Å—å: ${remaining}</div>
          <div class="craft-progress">
            <div class="progress-bar" style="width: ${progress}%"></div>
          </div>
        </div>
      `;

      if (actionEl) {
        if (craftStatus.ready) {
          actionEl.innerHTML = '<button class="btn craft-complete" onclick="window.CraftClient.complete()">üî® –ó–∞–±—Ä–∞—Ç—å</button>';
        } else {
          actionEl.innerHTML = '<button class="btn craft-cancel" onclick="window.CraftClient.cancel()">‚ùå –û—Ç–º–µ–Ω–∏—Ç—å</button>';
        }
      }
    } else {
      statusEl.innerHTML = '<div class="craft-idle">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—Ä–∞—Ñ—Ç–∞</div>';
      if (actionEl) actionEl.innerHTML = '';
    }
  }

  // –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—Ä–∞—Ñ—Ç–∞
  function startCraftTimer() {
    stopCraftTimer();
    craftTimer = setInterval(() => {
      if (craftStatus) {
        craftStatus.remaining_sec = Math.max(0, craftStatus.remaining_sec - 1);
        craftStatus.progress = Math.min(1, (Date.now()/1000 - craftStatus.started_at) / (craftStatus.finish_at - craftStatus.started_at));
        craftStatus.ready = craftStatus.remaining_sec <= 0;
        updateCraftUI();

        if (craftStatus.ready) {
          stopCraftTimer();
        }
      }
    }, 1000);
  }

  function stopCraftTimer() {
    if (craftTimer) {
      clearInterval(craftTimer);
      craftTimer = null;
    }
  }

  // –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤
  function renderRecipesList(categories) {
    const container = $('#craftRecipes');
    if (!container) return;

    const categoryNames = {
      tools: 'üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
      weapons: '‚öîÔ∏è –û—Ä—É–∂–∏–µ',
      armor: 'üõ°Ô∏è –ë—Ä–æ–Ω—è',
      food: 'üçΩÔ∏è –ï–¥–∞',
      materials: 'üß± –ú–∞—Ç–µ—Ä–∏–∞–ª—ã',
      misc: 'üì¶ –†–∞–∑–Ω–æ–µ'
    };

    let html = '';
    for (const [catKey, recipes] of Object.entries(categories)) {
      const catName = categoryNames[catKey] || catKey;
      html += `<div class="craft-category">
        <h3 class="craft-cat-title">${catName}</h3>
        <div class="craft-recipes">`;

      for (const recipe of recipes) {
        const components = recipe.components.map(c => 
          `<span class="craft-component">${c.name} √ó${c.qty}</span>`
        ).join(' ');

        html += `
          <div class="craft-recipe" data-recipe="${recipe.key}">
            <div class="craft-recipe-header">
              <span class="craft-recipe-name">${recipe.name}</span>
              <span class="craft-recipe-time">${fmtTime(recipe.craft_time_sec)}</span>
            </div>
            <div class="craft-recipe-components">${components}</div>
            <div class="craft-recipe-result">‚Üí ${recipe.result.name} √ó${recipe.result.qty}</div>
            ${recipe.description ? `<div class="craft-recipe-desc">${recipe.description}</div>` : ''}
            <button class="btn craft-start" onclick="window.CraftClient.start('${recipe.key}')">üî® –°–æ–∑–¥–∞—Ç—å</button>
          </div>
        `;
      }
      html += '</div></div>';
    }

    container.innerHTML = html;
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã
  async function refreshRecipes() {
    const categories = await loadRecipes();
    renderRecipesList(categories);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  async function init() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫—Ä–∞—Ñ—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    await checkCraftStatus();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    setInterval(checkCraftStatus, 5000);
  }

  // –ü—É–±–ª–∏—á–Ω—ã–π API
  window.CraftClient = {
    init,
    start: startCraft,
    complete: completeCraft,
    cancel: cancelCraft,
    checkStatus: checkCraftStatus,
    refreshRecipes,
    getStatus: () => craftStatus
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
})();